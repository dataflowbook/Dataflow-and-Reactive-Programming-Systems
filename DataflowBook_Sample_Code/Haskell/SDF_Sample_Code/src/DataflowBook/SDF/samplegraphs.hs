module DataflowBook.SDF.SampleGraphs where

import DataflowBook.SDF.Schedule.Graph
import DataflowBook.SDF.Schedule.ScheduleOperations
import DataflowBook.SDF.Schedule.TokenCount

import Data.Array.IArray

example :: Graph
example = Graph topo initial capacity
    where
        topo = array ((0,0),(4,5))
            [( (0,0), 3)
            ,( (0,1), 0)
            ,( (0,2), 0)
            ,( (0,3), 0)
            ,( (0,4), 0)
            ,( (0,5), 0)
            ,( (1,0), -6)
            ,( (1,1), 2)
            ,( (1,2), 2)
            ,( (1,3), 0)
            ,( (1,4), 0)
            ,( (1,5), -4)
            ,( (2,0), 0)
            ,( (2,1), -1)
            ,( (2,2), 0)
            ,( (2,3), 0)
            ,( (2,4), 1)
            ,( (2,5), 2)
            ,( (3,0), 0)
            ,( (3,1), 0)
            ,( (3,2), 0)
            ,( (3,3), -2)
            ,( (3,4), -2)
            ,( (3,5), 0)
            ,( (4,0), 0)
            ,( (4,1), 0)
            ,( (4,2), -2)
            ,( (4,3), 2)
            ,( (4,4), 0)
            ,( (4,5), 0)
            ]
        initial = (emptyTokenCount 5) // [(5,8)]
--        capacity = arcCapacityVector sizeSumOfAbs topo
        capacity = arcCapacityVector (givenArcCapacity 100) topo

badgraph :: Graph
badgraph = Graph topo initial capacity
    where
        topo = array ((0,0),(2,2))
            [( (0,0), 1)
            ,( (0,1), 2)
            ,( (0,2), 0)
            ,( (1,0), -1)
            ,( (1,1), 0)
            ,( (1,2), 1)
            ,( (2,0), 0)
            ,( (2,1), -1)
            ,( (2,2), -1)
            ]
        initial = emptyTokenCount 2
        capacity = arcCapacityVector sizeSumOfAbs topo

goodgraph :: Graph
goodgraph = Graph topo initial capacity
    where
        topo = array ((0,0),(2,2))
            [( (0,0), 1)
            ,( (0,1), 2)
            ,( (0,2), 0)
            ,( (1,0), -1)
            ,( (1,1), 0)
            ,( (1,2), 2)
            ,( (2,0), 0)
            ,( (2,1), -1)
            ,( (2,2), -1)
            ]
        initial = emptyTokenCount 2
        capacity = arcCapacityVector sizeSumOfAbs topo

dFlipFlop :: Graph
dFlipFlop = Graph topo initial capacity
    where
        initial = (emptyTokenCount 10) // [(8,1),(7,1)] -- Kickstart needed to get it running the first time
        capacity = arcCapacityVector sizeSumOfAbs topo
        topo = array ((0,0),(8,10))
            [( (0,0), -1 )
            ,( (0,1), 0 )
            ,( (0,2), 0 )
            ,( (0,3), -1 )
            ,( (0,4), 0 )
            ,( (0,5), 1 )
            ,( (0,6), 0 )
            ,( (0,7), 0 )
            ,( (0,8), 0 )
            ,( (0,9), 0 )
            ,( (0,10), 0 )
            ,( (1,0), 0 )
            ,( (1,1), 0 )
            ,( (1,2), -1 )
            ,( (1,3), 0 )
            ,( (1,4), -1 )
            ,( (1,5), 0 )
            ,( (1,6), 1 )
            ,( (1,7), 0 )
            ,( (1,8), 0 )
            ,( (1,9), 0 )
            ,( (1,10), 0 )
            ,( (2,0), 0 )
            ,( (2,1), 0 )
            ,( (2,2), 0 )
            ,( (2,3), 0 )
            ,( (2,4), 0 )
            ,( (2,5), -1 )
            ,( (2,6), 0 )
            ,( (2,7), -1 )
            ,( (2,8), 1 )
            ,( (2,9), 1 )
            ,( (2,10), 0 )
            ,( (3,0), 0 )
            ,( (3,1), 0 )
            ,( (3,2), 0 )
            ,( (3,3), 0 )
            ,( (3,4), 0 )
            ,( (3,5), 0 )
            ,( (3,6), -1 )
            ,( (3,7), 1 )
            ,( (3,8), -1 )
            ,( (3,9), 0 )
            ,( (3,10), 1 )
            ,( (4,0), 0 )
            ,( (4,1), -1 )
            ,( (4,2), 0 )
            ,( (4,3), 0 )
            ,( (4,4), 1 )
            ,( (4,5), 0 )
            ,( (4,6), 0 )
            ,( (4,7), 0 )
            ,( (4,8), 0 )
            ,( (4,9), 0 )
            ,( (4,10), 0 )
            ,( (5,0), 1 )
            ,( (5,1), 1 )
            ,( (5,2), 0 )
            ,( (5,3), 0 )
            ,( (5,4), 0 )
            ,( (5,5), 0 )
            ,( (5,6), 0 )
            ,( (5,7), 0 )
            ,( (5,8), 0 )
            ,( (5,9), 0 )
            ,( (5,10), 0 )
            ,( (6,0), 0 )
            ,( (6,1), 0 )
            ,( (6,2), 1 )
            ,( (6,3), 1 )
            ,( (6,4), 0 )
            ,( (6,5), 0 )
            ,( (6,6), 0 )
            ,( (6,7), 0 )
            ,( (6,8), 0 )
            ,( (6,9), 0 )
            ,( (6,10), 0 )
            ,( (7,0), 0 )
            ,( (7,1), 0 )
            ,( (7,2), 0 )
            ,( (7,3), 0 )
            ,( (7,4), 0 )
            ,( (7,5), 0 )
            ,( (7,6), 0 )
            ,( (7,7), 0 )
            ,( (7,8), 0 )
            ,( (7,9), -1 )
            ,( (7,10), 0 )
            ,( (8,0), 0 )
            ,( (8,1), 0 )
            ,( (8,2), 0 )
            ,( (8,3), 0 )
            ,( (8,4), 0 )
            ,( (8,5), 0 )
            ,( (8,6), 0 )
            ,( (8,7), 0 )
            ,( (8,8), 0 )
            ,( (8,9), 0 )
            ,( (8,10), -1 )
            ]

test3 :: Graph
test3 = Graph topo initial capacity
    where
        initial = (emptyTokenCount 5)
        capacity = arcCapacityVector sizeSumOfAbs topo
        topo = array ((0,0),(5,5))
            [ ((0,0), 3)
            , ((0,1), 0)
            , ((0,2), 0)
            , ((0,3), 0)
            , ((0,4), 0)
            , ((0,5), 0)
            , ((1,0), -12)
            , ((1,1), 3)
            , ((1,2), 0)
            , ((1,3), 0)
            , ((1,4), 0)
            , ((1,5), 1)
            , ((2,0), 0)
            , ((2,1), -1)
            , ((2,2), 1)
            , ((2,3), 0)
            , ((2,4), 0)
            , ((2,5), 0)
            , ((3,0), 0)
            , ((3,1), 0)
            , ((3,2), -1)
            , ((3,3), 1)
            , ((3,4), 0)
            , ((3,5), 0)
            , ((4,0), 0)
            , ((4,1), 0)
            , ((4,2), 0)
            , ((4,3), -3)
            , ((4,4), 1)
            , ((4,5), 0)
            , ((5,0), 0)
            , ((5,1), 0)
            , ((5,2), 0)
            , ((5,3), 0)
            , ((5,4), -1)
            , ((5,5), -1)
            ]
